//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17626
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace LanguageWidget.LanguageReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Language", Namespace="http://schemas.datacontract.org/2004/07/PopCornOneWebApp.Models")]
    public partial class Language : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int LanguageIdField;
        
        private string LanguageNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LanguageId {
            get {
                return this.LanguageIdField;
            }
            set {
                if ((this.LanguageIdField.Equals(value) != true)) {
                    this.LanguageIdField = value;
                    this.RaisePropertyChanged("LanguageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LanguageName {
            get {
                return this.LanguageNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LanguageNameField, value) != true)) {
                    this.LanguageNameField = value;
                    this.RaisePropertyChanged("LanguageName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LanguageReference.ILanguageService")]
    public interface ILanguageService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILanguageService/DisplayLanguages", ReplyAction="http://tempuri.org/ILanguageService/DisplayLanguagesResponse")]
        System.IAsyncResult BeginDisplayLanguages(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<LanguageWidget.LanguageReference.Language> EndDisplayLanguages(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILanguageService/CreateLanguage", ReplyAction="http://tempuri.org/ILanguageService/CreateLanguageResponse")]
        System.IAsyncResult BeginCreateLanguage(LanguageWidget.LanguageReference.Language language, System.AsyncCallback callback, object asyncState);
        
        bool EndCreateLanguage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILanguageService/EditLanguage", ReplyAction="http://tempuri.org/ILanguageService/EditLanguageResponse")]
        System.IAsyncResult BeginEditLanguage(LanguageWidget.LanguageReference.Language language, System.AsyncCallback callback, object asyncState);
        
        bool EndEditLanguage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILanguageService/DeleteLanguage", ReplyAction="http://tempuri.org/ILanguageService/DeleteLanguageResponse")]
        System.IAsyncResult BeginDeleteLanguage(int id, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteLanguage(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILanguageServiceChannel : LanguageWidget.LanguageReference.ILanguageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DisplayLanguagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DisplayLanguagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<LanguageWidget.LanguageReference.Language> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<LanguageWidget.LanguageReference.Language>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateLanguageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateLanguageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditLanguageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditLanguageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteLanguageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteLanguageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LanguageServiceClient : System.ServiceModel.ClientBase<LanguageWidget.LanguageReference.ILanguageService>, LanguageWidget.LanguageReference.ILanguageService {
        
        private BeginOperationDelegate onBeginDisplayLanguagesDelegate;
        
        private EndOperationDelegate onEndDisplayLanguagesDelegate;
        
        private System.Threading.SendOrPostCallback onDisplayLanguagesCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateLanguageDelegate;
        
        private EndOperationDelegate onEndCreateLanguageDelegate;
        
        private System.Threading.SendOrPostCallback onCreateLanguageCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditLanguageDelegate;
        
        private EndOperationDelegate onEndEditLanguageDelegate;
        
        private System.Threading.SendOrPostCallback onEditLanguageCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteLanguageDelegate;
        
        private EndOperationDelegate onEndDeleteLanguageDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteLanguageCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public LanguageServiceClient() {
        }
        
        public LanguageServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LanguageServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LanguageServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LanguageServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<DisplayLanguagesCompletedEventArgs> DisplayLanguagesCompleted;
        
        public event System.EventHandler<CreateLanguageCompletedEventArgs> CreateLanguageCompleted;
        
        public event System.EventHandler<EditLanguageCompletedEventArgs> EditLanguageCompleted;
        
        public event System.EventHandler<DeleteLanguageCompletedEventArgs> DeleteLanguageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LanguageWidget.LanguageReference.ILanguageService.BeginDisplayLanguages(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDisplayLanguages(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<LanguageWidget.LanguageReference.Language> LanguageWidget.LanguageReference.ILanguageService.EndDisplayLanguages(System.IAsyncResult result) {
            return base.Channel.EndDisplayLanguages(result);
        }
        
        private System.IAsyncResult OnBeginDisplayLanguages(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((LanguageWidget.LanguageReference.ILanguageService)(this)).BeginDisplayLanguages(callback, asyncState);
        }
        
        private object[] OnEndDisplayLanguages(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<LanguageWidget.LanguageReference.Language> retVal = ((LanguageWidget.LanguageReference.ILanguageService)(this)).EndDisplayLanguages(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDisplayLanguagesCompleted(object state) {
            if ((this.DisplayLanguagesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DisplayLanguagesCompleted(this, new DisplayLanguagesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DisplayLanguagesAsync() {
            this.DisplayLanguagesAsync(null);
        }
        
        public void DisplayLanguagesAsync(object userState) {
            if ((this.onBeginDisplayLanguagesDelegate == null)) {
                this.onBeginDisplayLanguagesDelegate = new BeginOperationDelegate(this.OnBeginDisplayLanguages);
            }
            if ((this.onEndDisplayLanguagesDelegate == null)) {
                this.onEndDisplayLanguagesDelegate = new EndOperationDelegate(this.OnEndDisplayLanguages);
            }
            if ((this.onDisplayLanguagesCompletedDelegate == null)) {
                this.onDisplayLanguagesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDisplayLanguagesCompleted);
            }
            base.InvokeAsync(this.onBeginDisplayLanguagesDelegate, null, this.onEndDisplayLanguagesDelegate, this.onDisplayLanguagesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LanguageWidget.LanguageReference.ILanguageService.BeginCreateLanguage(LanguageWidget.LanguageReference.Language language, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateLanguage(language, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool LanguageWidget.LanguageReference.ILanguageService.EndCreateLanguage(System.IAsyncResult result) {
            return base.Channel.EndCreateLanguage(result);
        }
        
        private System.IAsyncResult OnBeginCreateLanguage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            LanguageWidget.LanguageReference.Language language = ((LanguageWidget.LanguageReference.Language)(inValues[0]));
            return ((LanguageWidget.LanguageReference.ILanguageService)(this)).BeginCreateLanguage(language, callback, asyncState);
        }
        
        private object[] OnEndCreateLanguage(System.IAsyncResult result) {
            bool retVal = ((LanguageWidget.LanguageReference.ILanguageService)(this)).EndCreateLanguage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateLanguageCompleted(object state) {
            if ((this.CreateLanguageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateLanguageCompleted(this, new CreateLanguageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateLanguageAsync(LanguageWidget.LanguageReference.Language language) {
            this.CreateLanguageAsync(language, null);
        }
        
        public void CreateLanguageAsync(LanguageWidget.LanguageReference.Language language, object userState) {
            if ((this.onBeginCreateLanguageDelegate == null)) {
                this.onBeginCreateLanguageDelegate = new BeginOperationDelegate(this.OnBeginCreateLanguage);
            }
            if ((this.onEndCreateLanguageDelegate == null)) {
                this.onEndCreateLanguageDelegate = new EndOperationDelegate(this.OnEndCreateLanguage);
            }
            if ((this.onCreateLanguageCompletedDelegate == null)) {
                this.onCreateLanguageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateLanguageCompleted);
            }
            base.InvokeAsync(this.onBeginCreateLanguageDelegate, new object[] {
                        language}, this.onEndCreateLanguageDelegate, this.onCreateLanguageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LanguageWidget.LanguageReference.ILanguageService.BeginEditLanguage(LanguageWidget.LanguageReference.Language language, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditLanguage(language, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool LanguageWidget.LanguageReference.ILanguageService.EndEditLanguage(System.IAsyncResult result) {
            return base.Channel.EndEditLanguage(result);
        }
        
        private System.IAsyncResult OnBeginEditLanguage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            LanguageWidget.LanguageReference.Language language = ((LanguageWidget.LanguageReference.Language)(inValues[0]));
            return ((LanguageWidget.LanguageReference.ILanguageService)(this)).BeginEditLanguage(language, callback, asyncState);
        }
        
        private object[] OnEndEditLanguage(System.IAsyncResult result) {
            bool retVal = ((LanguageWidget.LanguageReference.ILanguageService)(this)).EndEditLanguage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditLanguageCompleted(object state) {
            if ((this.EditLanguageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditLanguageCompleted(this, new EditLanguageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditLanguageAsync(LanguageWidget.LanguageReference.Language language) {
            this.EditLanguageAsync(language, null);
        }
        
        public void EditLanguageAsync(LanguageWidget.LanguageReference.Language language, object userState) {
            if ((this.onBeginEditLanguageDelegate == null)) {
                this.onBeginEditLanguageDelegate = new BeginOperationDelegate(this.OnBeginEditLanguage);
            }
            if ((this.onEndEditLanguageDelegate == null)) {
                this.onEndEditLanguageDelegate = new EndOperationDelegate(this.OnEndEditLanguage);
            }
            if ((this.onEditLanguageCompletedDelegate == null)) {
                this.onEditLanguageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditLanguageCompleted);
            }
            base.InvokeAsync(this.onBeginEditLanguageDelegate, new object[] {
                        language}, this.onEndEditLanguageDelegate, this.onEditLanguageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LanguageWidget.LanguageReference.ILanguageService.BeginDeleteLanguage(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteLanguage(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool LanguageWidget.LanguageReference.ILanguageService.EndDeleteLanguage(System.IAsyncResult result) {
            return base.Channel.EndDeleteLanguage(result);
        }
        
        private System.IAsyncResult OnBeginDeleteLanguage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return ((LanguageWidget.LanguageReference.ILanguageService)(this)).BeginDeleteLanguage(id, callback, asyncState);
        }
        
        private object[] OnEndDeleteLanguage(System.IAsyncResult result) {
            bool retVal = ((LanguageWidget.LanguageReference.ILanguageService)(this)).EndDeleteLanguage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteLanguageCompleted(object state) {
            if ((this.DeleteLanguageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteLanguageCompleted(this, new DeleteLanguageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteLanguageAsync(int id) {
            this.DeleteLanguageAsync(id, null);
        }
        
        public void DeleteLanguageAsync(int id, object userState) {
            if ((this.onBeginDeleteLanguageDelegate == null)) {
                this.onBeginDeleteLanguageDelegate = new BeginOperationDelegate(this.OnBeginDeleteLanguage);
            }
            if ((this.onEndDeleteLanguageDelegate == null)) {
                this.onEndDeleteLanguageDelegate = new EndOperationDelegate(this.OnEndDeleteLanguage);
            }
            if ((this.onDeleteLanguageCompletedDelegate == null)) {
                this.onDeleteLanguageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteLanguageCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteLanguageDelegate, new object[] {
                        id}, this.onEndDeleteLanguageDelegate, this.onDeleteLanguageCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override LanguageWidget.LanguageReference.ILanguageService CreateChannel() {
            return new LanguageServiceClientChannel(this);
        }
        
        private class LanguageServiceClientChannel : ChannelBase<LanguageWidget.LanguageReference.ILanguageService>, LanguageWidget.LanguageReference.ILanguageService {
            
            public LanguageServiceClientChannel(System.ServiceModel.ClientBase<LanguageWidget.LanguageReference.ILanguageService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDisplayLanguages(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DisplayLanguages", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<LanguageWidget.LanguageReference.Language> EndDisplayLanguages(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<LanguageWidget.LanguageReference.Language> _result = ((System.Collections.ObjectModel.ObservableCollection<LanguageWidget.LanguageReference.Language>)(base.EndInvoke("DisplayLanguages", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateLanguage(LanguageWidget.LanguageReference.Language language, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = language;
                System.IAsyncResult _result = base.BeginInvoke("CreateLanguage", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndCreateLanguage(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("CreateLanguage", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditLanguage(LanguageWidget.LanguageReference.Language language, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = language;
                System.IAsyncResult _result = base.BeginInvoke("EditLanguage", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndEditLanguage(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("EditLanguage", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteLanguage(int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteLanguage", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDeleteLanguage(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DeleteLanguage", _args, result)));
                return _result;
            }
        }
    }
}
